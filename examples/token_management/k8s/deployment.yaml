apiVersion: apps/v1
kind: Deployment
metadata:
  name: token-service
  namespace: auth
  labels:
    app: token-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: token-service
  template:
    metadata:
      labels:
        app: token-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      containers:
      - name: token-service
        image: gauth/token-service:latest
        ports:
        - containerPort: 8443
          name: https
        - containerPort: 9090
          name: metrics
        env:
        - name: REDIS_ADDRESSES
          value: "redis-cluster-0.redis:6379,redis-cluster-1.redis:6379,redis-cluster-2.redis:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: password
        - name: JWT_SIGNING_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-secrets
              key: signing-key
        volumeMounts:
        - name: tls-certs
          mountPath: "/etc/tls"
          readOnly: true
        - name: config
          mountPath: "/etc/token-service"
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: tls-certs
        secret:
          secretName: tls-certs
      - name: config
        configMap:
          name: token-service-config
---
apiVersion: v1
kind: Service
metadata:
  name: token-service
  namespace: auth
  labels:
    app: token-service
spec:
  type: ClusterIP
  ports:
  - port: 443
    targetPort: 8443
    protocol: TCP
    name: https
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: token-service
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: token-service
  namespace: auth
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - auth.example.com
    secretName: token-service-tls
  rules:
  - host: auth.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: token-service
            port:
              name: https
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: token-service
  namespace: auth
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: token-service
  endpoints:
  - port: metrics
    interval: 15s
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: token-service
  namespace: auth
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: token-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 300
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: token-service
  namespace: auth
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: token-service
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: token-service-config
  namespace: auth
data:
  config.json: |
    {
      "token_expiry": "1h",
      "refresh_token_expiry": "24h",
      "key_rotation_interval": "12h",
      "min_key_size": 2048,
      "allowed_issuers": ["auth-service", "admin-service"],
      "store_type": "redis",
      "redis_config": {
        "cluster_mode": true,
        "db": 0
      },
      "rate_limits": {
        "requests_per_minute": 60,
        "burst_size": 10,
        "tokens_per_user": 5
      },
      "cors_settings": {
        "allowed_origins": ["https://example.com"],
        "allowed_methods": ["GET", "POST"],
        "max_age": 3600
      },
      "tls_config": {
        "min_version": "1.2",
        "cipher_suites": [
          "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
          "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
        ]
      }
    }
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: token-service
  namespace: auth
spec:
  podSelector:
    matchLabels:
      app: token-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8443
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: redis
    ports:
    - protocol: TCP
      port: 6379