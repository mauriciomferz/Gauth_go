# 🚀 Production Configuration - Gimel-App-0001

apiVersion: v1
kind: ConfigMap
metadata:
  name: gauth-demo-config
  namespace: default
data:
  # Application Configuration
  APP_NAME: "Gimel-App-0001"
  APP_VERSION: "v1.2.0"
  ENVIRONMENT: "production"
  
  # Server Configuration
  SERVER_PORT: "8080"
  SERVER_HOST: "0.0.0.0"
  CORS_ORIGINS: "https://gimel-app-0001.herokuapp.com,https://gauth-demo.netlify.app"
  
  # API Configuration
  API_VERSION: "v1"
  API_BASE_PATH: "/api/v1"
  WEBSOCKET_PATH: "/ws"
  
  # Security Configuration
  SECURITY_HEADERS: "true"
  RATE_LIMITING: "true"
  REQUEST_TIMEOUT: "30s"
  
  # Logging Configuration
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  ACCESS_LOGS: "true"
  
  # Performance Configuration
  MAX_REQUEST_SIZE: "10MB"
  GZIP_COMPRESSION: "true"
  CACHE_CONTROL: "max-age=3600"

---
# Production Deployment Script
apiVersion: v1
kind: ConfigMap
metadata:
  name: production-deploy-script
data:
  deploy.sh: |
    #!/bin/bash
    
    # Gimel-App-0001 Production Deployment
    set -e
    
    echo "🚀 Starting Gimel-App-0001 Production Deployment..."
    
    # Environment setup
    export NODE_ENV=production
    export GO_ENV=production
    export PORT=8080
    
    # Build backend
    echo "📦 Building Go backend..."
    cd web/backend
    go mod tidy
    go build -ldflags="-w -s" -o ../../gauth-server main.go
    cd ../..
    
    # Build frontend
    echo "🎨 Building React frontend..."
    cd web
    npm ci --production
    npm run build
    cd ..
    
    # Create production directory structure
    echo "📁 Creating production structure..."
    mkdir -p dist/{static,templates}
    cp -r web/build/* dist/static/
    cp web/standalone-demo.html dist/templates/
    
    # Copy server binary
    cp gauth-server dist/
    
    # Create production startup script
    cat > dist/start.sh << 'EOF'
    #!/bin/bash
    export PORT=8080
    export GIN_MODE=release
    ./gauth-server
    EOF
    chmod +x dist/start.sh
    
    # Create Docker configuration
    cat > dist/Dockerfile << 'EOF'
    FROM alpine:latest
    RUN apk --no-cache add ca-certificates tzdata
    WORKDIR /app
    COPY . .
    EXPOSE 8080
    CMD ["./start.sh"]
    EOF
    
    # Create docker-compose for production
    cat > dist/docker-compose.yml << 'EOF'
    version: '3.8'
    services:
      gauth-app:
        build: .
        ports:
          - "8080:8080"
        environment:
          - GIN_MODE=release
          - PORT=8080
        restart: unless-stopped
        healthcheck:
          test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
          interval: 30s
          timeout: 10s
          retries: 3
    EOF
    
    echo "✅ Production build completed!"
    echo "📦 Production files in: ./dist/"
    echo "🚀 Deploy with: cd dist && docker-compose up -d"
    
---
# Kubernetes Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gauth-demo-deployment
  labels:
    app: gauth-demo
spec:
  replicas: 3
  selector:
    matchLabels:
      app: gauth-demo
  template:
    metadata:
      labels:
        app: gauth-demo
    spec:
      containers:
      - name: gauth-demo
        image: gimel/gauth-demo:latest
        ports:
        - containerPort: 8080
        env:
        - name: GIN_MODE
          value: "release"
        - name: PORT
          value: "8080"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Service Configuration
apiVersion: v1
kind: Service
metadata:
  name: gauth-demo-service
spec:
  selector:
    app: gauth-demo
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer

---
# Ingress Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gauth-demo-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - gauth-demo.yourdomain.com
    secretName: gauth-demo-tls
  rules:
  - host: gauth-demo.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: gauth-demo-service
            port:
              number: 80

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gauth-demo-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gauth-demo-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Monitoring Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
    - job_name: 'gauth-demo'
      static_configs:
      - targets: ['gauth-demo-service:80']
      metrics_path: '/metrics'
      scrape_interval: 10s

---
# Environment-specific configurations
apiVersion: v1
kind: ConfigMap
metadata:
  name: env-configs
data:
  # Development
  development.env: |
    NODE_ENV=development
    GO_ENV=development
    DEBUG=true
    LOG_LEVEL=debug
    HOT_RELOAD=true
  
  # Staging
  staging.env: |
    NODE_ENV=staging
    GO_ENV=staging
    DEBUG=false
    LOG_LEVEL=info
    CORS_ORIGINS=https://staging.gauth-demo.com
  
  # Production
  production.env: |
    NODE_ENV=production
    GO_ENV=production
    DEBUG=false
    LOG_LEVEL=warn
    CORS_ORIGINS=https://gauth-demo.com,https://gimel-app-0001.com
    RATE_LIMIT=100
    SECURITY_HEADERS=true
    GZIP_COMPRESSION=true

---
# Health Check Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-check-config
data:
  healthcheck.sh: |
    #!/bin/bash
    
    # Comprehensive health check for Gimel-App-0001
    
    echo "🏥 Running health checks..."
    
    # 1. API Health Check
    echo "🔍 Checking API health..."
    HEALTH_RESPONSE=$(curl -s http://localhost:8080/health || echo "FAILED")
    if [[ "$HEALTH_RESPONSE" == *"ok"* ]]; then
        echo "✅ API health check passed"
    else
        echo "❌ API health check failed"
        exit 1
    fi
    
    # 2. Test Core Endpoints
    echo "🧪 Testing core endpoints..."
    
    # RFC111 Authorization
    RFC111_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
        -d '{"client_id":"health_check","principal_id":"test"}' \
        http://localhost:8080/api/v1/rfc111/authorize || echo "FAILED")
    
    if [[ "$RFC111_RESPONSE" == *"code"* ]]; then
        echo "✅ RFC111 endpoint working"
    else
        echo "❌ RFC111 endpoint failed"
        exit 1
    fi
    
    # Enhanced Tokens
    TOKEN_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
        -d '{"ai_capabilities":["test"],"business_restrictions":["test"]}' \
        http://localhost:8080/api/v1/tokens/enhanced-simple || echo "FAILED")
    
    if [[ "$TOKEN_RESPONSE" == *"token_id"* ]]; then
        echo "✅ Token endpoint working"
    else
        echo "❌ Token endpoint failed"
        exit 1
    fi
    
    # 3. Performance Check
    echo "⚡ Checking response times..."
    RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:8080/health)
    if (( $(echo "$RESPONSE_TIME < 1.0" | bc -l) )); then
        echo "✅ Response time acceptable: ${RESPONSE_TIME}s"
    else
        echo "⚠️  Slow response time: ${RESPONSE_TIME}s"
    fi
    
    echo "🎉 All health checks passed!"