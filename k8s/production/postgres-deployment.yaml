apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: gauth-production
type: Opaque
data:
  postgres-password: c2VjdXJlX3Bvc3RncmVzX3Bhc3N3b3Jk  # base64 encoded 'secure_postgres_password'
  gauth-password: c2VjdXJlX2FwcF9wYXNzd29yZA==  # base64 encoded 'secure_app_password'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: gauth-production
data:
  postgresql.conf: |
    # PostgreSQL configuration for production
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    max_worker_processes = 8
    max_parallel_workers_per_gather = 4
    max_parallel_workers = 8
    max_parallel_maintenance_workers = 4
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_truncate_on_rotation = on
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 0
    log_error_verbosity = default
    
    # SSL
    ssl = on
    ssl_cert_file = 'server.crt'
    ssl_key_file = 'server.key'
    ssl_ca_file = 'ca.crt'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: gauth-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: gauth-production
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: gauth
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config-volume
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - gauth
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - gauth
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 2Gi
            cpu: 1000m
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config-volume
        configMap:
          name: postgres-config
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: gauth-production
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: gauth-production
data:
  init-db.sql: |
    -- GAuth Database Initialization Script
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    
    CREATE SCHEMA IF NOT EXISTS gauth;
    SET search_path TO gauth, public;
    
    CREATE TABLE IF NOT EXISTS tokens (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        token_value TEXT NOT NULL UNIQUE,
        client_id VARCHAR(255) NOT NULL,
        subject VARCHAR(255) NOT NULL,
        scopes TEXT[],
        expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        revoked_at TIMESTAMP WITH TIME ZONE,
        metadata JSONB
    );
    
    CREATE TABLE IF NOT EXISTS grants (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        grant_id VARCHAR(255) NOT NULL UNIQUE,
        client_id VARCHAR(255) NOT NULL,
        scopes TEXT[],
        expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        used_at TIMESTAMP WITH TIME ZONE,
        metadata JSONB
    );
    
    CREATE TABLE IF NOT EXISTS audit_logs (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        event_type VARCHAR(100) NOT NULL,
        client_id VARCHAR(255),
        user_id VARCHAR(255),
        resource VARCHAR(255),
        action VARCHAR(100),
        result VARCHAR(50),
        metadata JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    CREATE INDEX IF NOT EXISTS idx_tokens_client_id ON tokens(client_id);
    CREATE INDEX IF NOT EXISTS idx_tokens_expires_at ON tokens(expires_at);
    CREATE INDEX IF NOT EXISTS idx_tokens_created_at ON tokens(created_at);
    CREATE INDEX IF NOT EXISTS idx_grants_client_id ON grants(client_id);
    CREATE INDEX IF NOT EXISTS idx_grants_expires_at ON grants(expires_at);
    CREATE INDEX IF NOT EXISTS idx_audit_logs_event_type ON audit_logs(event_type);
    CREATE INDEX IF NOT EXISTS idx_audit_logs_client_id ON audit_logs(client_id);
    CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON audit_logs(created_at);
    
    CREATE USER gauth_app WITH PASSWORD 'secure_app_password';
    GRANT USAGE ON SCHEMA gauth TO gauth_app;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA gauth TO gauth_app;
    GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA gauth TO gauth_app;
    
    ALTER DEFAULT PRIVILEGES IN SCHEMA gauth GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO gauth_app;
    ALTER DEFAULT PRIVILEGES IN SCHEMA gauth GRANT USAGE, SELECT ON SEQUENCES TO gauth_app;