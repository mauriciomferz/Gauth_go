/*
Package handlers provides implementations of event handlers for the GAuth events system.

This package contains various implementations of the events.EventHandler interface
that can be used to process events generated by the GAuth authentication and
authorization system.

Key Features:
  - Strongly typed event handling
  - Built-in handlers for common use cases
  - Composable handler architecture
  - Support for filtering and transformation

Available Handlers:

LoggingHandler:

	Logs events to the standard logger with configurable formatting.

MetricsHandler:

	Collects metrics from events for monitoring and analysis.

AuditHandler:

	Stores events for audit purposes with circular buffer support.

MultiHandler:

	Combines multiple handlers into a single handler.

FilteredHandler:

	Filters events before passing them to the underlying handler.

Usage Example:

	import (
		"github.com/Gimel-Foundation/gauth/pkg/events"
		"github.com/Gimel-Foundation/gauth/pkg/events/handlers"
	)

	// Create handlers
	loggingHandler := handlers.NewLoggingHandler()
	metricsHandler := handlers.NewMetricsHandler()
	auditHandler := handlers.NewAuditHandler(1000)

	// Create a multi-handler
	multiHandler := handlers.NewMultiHandler()
	multiHandler.AddHandler(loggingHandler)
	multiHandler.AddHandler(metricsHandler)
	multiHandler.AddHandler(auditHandler)

	// Create a filtered handler for specific event types
	authHandler := handlers.NewFilteredHandler(multiHandler, func(e events.Event) bool {
		return e.Type == events.EventTypeAuth
	})

	// Create an event
	event := events.Event{
		ID:        "evt-123",
		Type:      events.EventTypeAuth,
		Action:    string(events.ActionLogin),
		Status:    string(events.StatusSuccess),
		Timestamp: time.Now(),
		Subject:   "user-456",
		Message:   "User logged in successfully",
	}

	// Handle the event
	authHandler.Handle(event)
*/
package handlers
