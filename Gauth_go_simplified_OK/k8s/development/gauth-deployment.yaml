apiVersion: v1
kind: Namespace
metadata:
  name: gauth-development
  labels:
    name: gauth-development
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gauth-config
  namespace: gauth-development
data:
  config.yaml: |
    server:
      port: 8080
      host: "0.0.0.0"
    database:
      url: "postgres://gauth_app:secure_app_password@postgres-service:5432/gauth?sslmode=require"
      max_connections: 50
      connection_timeout: "30s"
    redis:
      url: "redis://redis-service:6379"
      pool_size: 10
    vault:
      address: "https://vault-service:8200"
      mount_path: "gauth"
    monitoring:
      enabled: true
      metrics_port: 9090
    logging:
      level: "info"
      format: "json"
---
apiVersion: v1
kind: Secret
metadata:
  name: gauth-secrets
  namespace: gauth-development
type: Opaque
data:
  vault-token: ZGV2LXJvb3QtdG9rZW4=  # base64 encoded 'dev-root-token'
  jwt-signing-key: ""  # Add actual base64 encoded signing key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gauth-deployment
  namespace: gauth-development
  labels:
    app: gauth
spec:
  replicas: 3
  selector:
    matchLabels:
      app: gauth
  template:
    metadata:
      labels:
        app: gauth
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: gauth
        image: gauth-demo:dev  # Build locally with: docker build -t gauth-demo:dev .
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: CONFIG_FILE
          value: "/etc/gauth/config.yaml"
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: gauth-secrets
              key: vault-token
        - name: JWT_SIGNING_KEY
          valueFrom:
            secretKeyRef:
              name: gauth-secrets
              key: jwt-signing-key
        volumeMounts:
        - name: config-volume
          mountPath: /etc/gauth
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: gauth-config
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: gauth-service
  namespace: gauth-development
  labels:
    app: gauth
spec:
  selector:
    app: gauth
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gauth-ingress
  namespace: gauth-development
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - gauth-dev.example.com
    secretName: gauth-tls
  rules:
  - host: gauth-dev.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: gauth-service
            port:
              number: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gauth-pdb
  namespace: gauth-development
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: gauth
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gauth-hpa
  namespace: gauth-development
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gauth-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80