name: GAuth CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.25']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Start Redis for testing
      uses: supercharge/redis-github-action@1.7.0
      with:
        redis-version: 7
        redis-port: 6379

    - name: Start PostgreSQL for testing
      uses: harmon758/postgresql-action@v1
      with:
        postgresql version: '15'
        postgresql db: 'gauth'
        postgresql user: 'gauth'
        postgresql password: 'gauth_test_pass'

    - name: Install dependencies
      run: go mod download

    - name: Verify Go installation
      run: |
        go version
        go env GOOS GOARCH

    - name: Run unit tests
      run: |
        echo "🧪 Running comprehensive test suite with enhanced CI robustness..."
        go clean -testcache
        go clean -cache
        export GOMAXPROCS=2
        export GOMEMLIMIT=1GiB
        export CGO_ENABLED=1
        
        # Create a test runner script to handle exit codes properly
        cat > test_runner.sh << 'EOF'
        #!/bin/bash
        set -euo pipefail
        
        echo "Starting Go test execution..."
        echo "Go version: $(go version)"
        echo "Testing packages: ./pkg/... ./internal/... ./examples/cascade/pkg/gauth ./test/..."
        
        # Run tests and capture output and exit code
        if go test -v -race -timeout=15m -parallel=2 ./pkg/... ./internal/... ./examples/cascade/pkg/gauth ./test/...; then
          echo "✅ All tests passed successfully"
          exit 0
        else
          TEST_EXIT_CODE=$?
          echo "❌ Tests failed with exit code: $TEST_EXIT_CODE"
          exit $TEST_EXIT_CODE
        fi
        EOF
        
        chmod +x test_runner.sh
        ./test_runner.sh

    - name: Run linter
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=10m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Build
      run: make build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Install dependencies
      run: go mod download

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: results.sarif